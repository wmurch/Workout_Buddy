dotnet aspnet-codegenerator controller -name ProfileController -api -m Profile -dc DatabaseContext -outDir Controllers

dotnet aspnet-codegenerator controller -name WorkoutController -api -m Workout -dc DatabaseContext -outDir Controllers

dotnet aspnet-codegenerator controller -name ExerciseController -api -m Exercise -dc DatabaseContext -outDir Controllers

dotnet aspnet-codegenerator controller -name SearchController -api -m Search -dc DatabaseContext -outDir Controllers

// inputQueryHandler = () => {
  //   this.setState(
  //     {
  //       query: this.search.value
  //     },
  //     () => {
  //       if (this.state.query && this.state.query.length > 1) {
  //         if (this.state.query.length % 2 === 0) {
  //           this.getExercise()
  //         }
  //       }
  //     }
  //   )
  // }
  {/* <input
          placeholder="Search for...."
          ref={input => (this.search = input)}
          onChange={this.inputQueryHandler}
        /> */}
        {/* <Autocomplete
          items={[
            { id: 'foo', name: 'foodddddd' },
            { id: 'bar', name: 'bar' },
            { id: 'baz', name: 'baz' }
          ]}
          shouldItemRender={(item, value) =>
            item.name.toLowerCase().indexOf(value.toLowerCase()) > -1
          }
          getItemValue={item => item.name}
          renderItem={(item, highlighted) => (
            <div
              key={item.id}
              style={{ backgroundColor: highlighted ? '#eee' : 'transparent' }}
            >
              {item.name}
            </div>
          )}
          value={this.state.value}
          onChange={e => this.setState({ value: e.target.value })}
          onSelect={value => {
            console.log({ value })
            this.setState({ value })
          }}
        />
        <Autocomplete
          items={this.state.results}
          getItemValue={item => (this.search = item)}
          onChange={this.inputQueryHandler}
          renderItem={(item, isHighlighted) => (
            <div
              className={`item ${isHighlighted ? 'item-highlighted' : ''}`}
              key={item.id}
            >
              {item.name}
            </div>
          )}
        /> */}

        <table>
          <tbody>
            <tr>
              <th>Exercise</th>
              <th>Sets</th>
              <th>Reps</th>
              <th>Weight</th>
            </tr>
            <tr>
              <td>
                <Autocomplete
                  inputProps={{ id: 'exerciseId' }}
                  value={this.state.value}
                  items={this.state.exercises}
                  getItemValue={item => item.name}
                  onSelect={(value, exercise) => {
                    console.log({ value })
                    this.setState({ value, selectedExercise: exercise })
                  }}
                  onChange={(event, value) => {
                    this.setState({ value })
                    clearTimeout(this.requestTimer)
                    console.log({ value })
                    this.requestTimer = this.getExercisesForAutoComplete(
                      value,
                      searchResults => {
                        console.log('cb', { searchResults })
                        this.setState({ exercises: searchResults })
                      }
                    )
                  }}
                  renderMenu={children => (
                    <div className="menu">{children}</div>
                  )}
                  renderItem={(item, isHighlighted) => (
                    <div
                      className={`item ${
                        isHighlighted ? 'item-highlighted' : ''
                      }`}
                      key={item.id}
                    >
                      {item.name}
                    </div>
                  )}
                />
              </td>
              <td>
                <input
                  type="number"
                  placeholder="Sets"
                  name="Sets"
                  onChange={this.updateValue}
                />
              </td>
              <td>
                <input
                  type="number"
                  placeholder="Reps"
                  name="Reps"
                  onChange={this.updateValue}
                />
              </td>
              <td>
                <input
                  type="number"
                  placeholder="Weight"
                  name="Weight"
                  onChange={this.updateValue}
                />
              </td>
            </tr>
          </tbody>
        </table>